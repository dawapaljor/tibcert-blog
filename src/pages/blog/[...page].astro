---
import ListCategories from '@/components/ListCategories'
import ListPosts from '@/components/ListPosts'
import Shape from '@/components/icons/Shape'
import BaseLayout from '@/layouts/BaseLayout'
import { getPosts } from '@/utils'
import Logo from '@/components/icons/Logo'
import ShowTags from '@/components/ShowTags'
import { reverse } from 'dns'

import { getCollection } from 'astro:content';
import { Picture } from 'astro:assets';




// Define a basic structure for the pagination result
type PaginationResult = {
    currentPage: number;
    lastPage: number;
    data: any[]; // Adjust the type to match the structure of your paginated items
    url: {
        prev?: string;
        next?: string;
    };
};
//.sort((a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime());

type PaginateFunction = (items: any[], config: { pageSize: number }) => Promise<PaginationResult>;


export async function getStaticPaths({ paginate }: { paginate: PaginateFunction }) {
    const pages = await getCollection('blog', ({ data }) => {
        return data.draft !== true; // Filter out drafts if necessary
    });
    return paginate(pages.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),), { pageSize: 3}); // Adjust pageSize as needed
}

const { page }: { page: PaginationInfo } = Astro.props;
const { prev, next } = page.url;

// Define a type for the pagination information
type PaginationInfo = {
    currentPage: number;
    lastPage: number;
    data: PostItem[];
    url: {
        prev?: string;
        next?: string;
    };
};

// Define a type for the individual post item
type PostItem = {
    data: {
        title: string;
        description: string;
        image: string;
        imageAlt: string;
        pubDate: Date;
        translation: string;
        
    };
    slug: string;
};

---

<BaseLayout title='Home'>
	
	<ListCategories />
	
	<div>
		<ListPosts FirstBig={true} posts={blog} language={language}  langReadIn="བོད་ཡིག་ནང་ཀླག་" />
	</div>
	<div>
		<ShowTags/>
	</div>
</BaseLayout>


<script>
	import { animate } from 'motion'
	const showAnimations = localStorage.getItem('animations') === 'true'
	if (showAnimations) {
		animate(
			'.title',
			{ y: [80, 0], opacity: [0, 1] },
			{
				duration: 2.5,
				opacity: { duration: 3 },

				offset: [0, 0.55, 0.75]
			}
		)
	}
</script>
